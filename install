#!/bin/bash

#---------#
# GLOBALS #
#---------#
txtund=$(tput sgr 0 1)    # Underline
txtbld=$(tput bold)       # Bold
txtred=$(tput setaf 1)    # Red
txtgrn=$(tput setaf 2)    # Green
txtylw=$(tput setaf 3)    # Yellow
txtblu=$(tput setaf 4)    # Blue
txtpur=$(tput setaf 5)    # Purple
txtcyn=$(tput setaf 6)    # Cyan
txtwht=$(tput setaf 7)    # White
txtrst=$(tput sgr0)       # Text reset

INSTALL_DEPS=1
GENERATE_SYMFONY=0
CONFIGURE_DB=1
PHP_BIN="php"
# OVH trick
#PHP_BIN="php.BETA"
# 1and1 trick
#PHP_BIN="php5 -qC"
SYMFONY="$PHP_BIN symfony"

#-----------#
# FUNCTIONS #
#-----------#
# Display the author
function author(){
    echo -e "\nAuthor: Pierre CLEMENT <pierrecle@gmail.com>"
}
# Display the usage
function usage(){
    echo "Symfony 1.4 project installer script."
    echo "Usage: bash $0 [-d|v|h]"
}
# Display the help
function help(){
    usage
    echo "Parameters:"
    echo -e "\t-g\tDo not install git dependencies."
    echo -e "\t-s\tCreate ./symfony script (if symphony is added thanks to GIT and ./symfony is in .gitignore)"
    echo -e "\t-d\tDo not configure and fill the database."
    echo -e "\t-v\tDisplay symfony operations."
    echo -e "\t-h\tDisplay this help."
    author
}
# Check if the interpreter is bash
function check_interpreter(){
    if [ -z "${BASH}" ]; then
        echo "Error: you must use $0 with Bash interpreter."
        usage
        exit 1
    fi
}
# Check the arguments
function check_args(){
	verbose=0
    while getopts gsdvh option
    do
        case $option in
        g)
        	INSTALL_DEPS=0
        	;;
        s)
        	GENERATE_SYMFONY=1
        	;;
        d)
        	CONFIGURE_DB=0
            ;;
        v)
        	verbose=1
        	;;
        h)
            help
            exit 0
            ;;
        esac
    done
    
    if [ ${verbose} -eq 0 ]
    then
    	SYMFONY=${SYMFONY}" --quiet"
    fi
}
# Install git deps
function install_deps(){
	echo -e "${txtcyn}> Installing dependencies...${txtrst}"
	GIT_INSTALL=`find ./ -name git-install`
	if [ -z $GIT_INSTALL ]
	then
		echo -e "${txtred}  >> Error, git-install not found!${txtrst}"
	elif [ ! -e "deps" ]
	then
		echo -e "${txtgrn}  >> No deps file found.${txtrst}"
	else
		$PHP_BIN $GIT_INSTALL install --reinstall
	fi
}
# Generate ./symfony (unix only)
function generate_symfony()
{
	echo -e "${txtcyn}> Generating ./symfony...${txtrst}"
cat << SYMFO >./symfony
#!/usr/bin/env php
<?php

/*
 * This file is part of the symfony package.
 * (c) Fabien Potencier <fabien.potencier@symfony-project.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

chdir(dirname(__FILE__));
require_once(dirname(__FILE__).'/config/ProjectConfiguration.class.php');
include(sfCoreAutoload::getInstance()->getBaseDir().'/command/cli.php');
SYMFO
	chmod u+x ./symfony
}
# Configure and fill the database
function configure_db() {
	echo -e "${txtcyn}> Configuring the database...${txtrst}"
	read -er -p "    Server address [${txtbld}${txtgrn}localhost${txtrst}]: " bd_serv
	read -er -p "    Database type [${txtbld}${txtgrn}mysql${txtrst}|pgsql|dblib|firebird|ibm|informix|oci|odbc|sqlite]: " bd_pdo
	read -er -p "    Database name: " bd_name
	read -er -p "    Drop \"${bd_name}\" database if exists [y|${txtbld}${txtgrn}N${txtrst}]: " bd_used
	read -er -p "    Tables prefix: " bd_prefix
	read -er -p "    Database username: " bd_uname
	read -ers -p "    Database password: " bd_upass
	read -er -p "    Project environment [${txtbld}${txtgrn}dev${txtrst}|prod]: " apps_env 

	if [ -z ${bd_serv} ]
	then
		bd_serv="localhost"
	fi
	
	if [ -z ${bd_pdo} ]
	then
		bd_pdo="mysql"
	fi
	if [ -z ${apps_env} ]
	then
		apps_env="dev"
	fi
	symfo_env="--env=\"${apps_env}\""


	case $bd_prefix in 
	  "" ) 
	     ;;
	  *_ )
	     ;;
	  * )
	  	bd_prefix=${bd_prefix}"_"
	esac
	
	echo ""
	echo -n "${txtcyn}  >> Writing database configuration files... ${txtrst}"

	sed -e "s/%%bd_prefix%%/${bd_prefix}/g" config/ProjectConfiguration.class.php.ini > config/ProjectConfiguration.class.php
	${SYMFONY} configure:database "${bd_pdo}:host=${bd_serv};dbname=${bd_name}" $bd_uname $bd_upass

	if [ "${bd_used}" == "y" ]
	then
	   ${SYMFONY} doctrine:drop-db --no-confirmation
	   ${SYMFONY} doctrine:build-db
	fi
	
	echo -e ">> ${txtgrn}bash ${txtrst} Database configuration files have been successfully written"

	echo -ne "${txtcyn}  >> Building the database... ${txtrst}"
	${SYMFONY} doctrine:build-model
	${SYMFONY} doctrine:build-forms
	${SYMFONY} doctrine:build-filters
	${SYMFONY} doctrine:build-sql
	${SYMFONY} doctrine:insert-sql
	${SYMFONY} plugin:publish-assets

	echo -ne "${txtcyn}  >> Loading data... ${txtrst}"
	${SYMFONY} doctrine:data-load ${symfo_env}
}
# Clear symfony's cache (wich should be empty)
function clean_cache() {
	echo -ne "${txtcyn}> Cleaning symfony's cache... ${txtrst}"
	${SYMFONY} cc
	echo -e ">> ${txtgrn}symfony ${txtrst} Database successfully configured"
}



#-----------#
# MAIN LOOP #
#-----------#

check_interpreter
check_args $*

if [ ${INSTALL_DEPS} -eq 1 ]
then
	install_deps
fi

if [ ${GENERATE_SYMFONY} -eq 1 ]
then
	generate_symfony
fi
	
if [ ${CONFIGURE_DB} -eq 1 ]
then
    configure_db
    clean_cache
fi